{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","NONE","sortType","setType","isReversed","switchOrder","className","onClick","ALPHABET","type","cn","LENGTH","currentOrder","goods","sortState","reversedState","visibleGoods","sort","g1","g2","localeCompare","reverse","console","log","getReorderedGoods","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,oBAAAA,E,iBAAAA,M,KAME,IAAME,EAAgB,WAC3B,MAA4BC,mBAASH,EAASI,MAA9C,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCH,oBAAS,GAA3C,mBAAOI,EAAP,KAAmBC,EAAnB,KA+BA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMJ,EAAQN,EAASW,WAChCC,KAAK,SACLH,UAAWI,IACT,SACA,UACA,CACE,WAAYR,IAAaL,EAASW,WAPxC,iCAcA,wBACED,QAAS,kBAAMJ,EAAQN,EAASc,SAChCF,KAAK,SACLH,UAAWI,IACT,SACA,aACA,CACE,WAAYR,IAAaL,EAASc,SAPxC,4BAcA,wBACEJ,QAAS,kBAAMF,GAAY,SAAAO,GAAY,OAAKA,MAC5CH,KAAK,SACLH,UAAWI,IACT,SACA,aACA,CACE,YAAaN,IAPnB,uBAciB,IAAfA,GAAuBF,IAAaL,EAASI,OAC7C,wBACEM,QAAS,WACPF,GAAY,GACZF,EAAQN,EAASI,OAEnBQ,KAAK,SACLH,UAAU,4BANZ,sBAcJ,6BAzFsB,SACxBO,EACAC,EACAC,GAEA,IAAMC,EAAY,YAAOH,GAqBzB,OAnBAG,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQL,GACN,KAAKjB,EAASc,OACZ,OAAOO,EAAGJ,GAAaK,EAAGL,GAE5B,KAAKjB,EAASW,SACZ,OAAOU,EAAGE,cAAcD,GAE1B,QAAS,OAAO,MAIhBJ,GACFC,EAAaK,UAIfC,QAAQC,IAAIrB,EAAUE,GAEfY,EAgEFQ,CAAkB1B,EAAiBI,EAAUE,GAC3CqB,KAAI,SAAAC,GAAI,OAAI,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCpH/CC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.445dab20.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE = 'none',\n  ALPHABET = 'alphabet',\n  LENGTH = 'length',\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setType] = useState(SortType.NONE);\n  const [isReversed, switchOrder] = useState(false);\n\n  const getReorderedGoods = (\n    goods: string[],\n    sortState: SortType,\n    reversedState: boolean,\n  ) => {\n    const visibleGoods = [...goods];\n\n    visibleGoods.sort((g1, g2) => {\n      switch (sortState) {\n        case SortType.LENGTH:\n          return g1[sortState] - g2[sortState];\n\n        case SortType.ALPHABET:\n          return g1.localeCompare(g2);\n\n        default: return 0;\n      }\n    });\n\n    if (reversedState) {\n      visibleGoods.reverse();\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(sortType, isReversed);\n\n    return visibleGoods;\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setType(SortType.ALPHABET)}\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setType(SortType.LENGTH)}\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => switchOrder(currentOrder => !currentOrder)}\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(isReversed === true || sortType !== SortType.NONE) && (\n          <button\n            onClick={() => {\n              switchOrder(false);\n              setType(SortType.NONE);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {getReorderedGoods(goodsFromServer, sortType, isReversed)\n          .map(good => <li data-cy=\"Good\" key={good}>{good}</li>)}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}